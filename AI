import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import os

def load_data():
    (x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()
    x_train = x_train.astype("float32") / 255.0
    x_test = x_test.astype("float32") / 255.0
    x_train = x_train[..., tf.newaxis]
    x_test = x_test[..., tf.newaxis]
    return (x_train, y_train), (x_test, y_test)


def build_model():
    inputs = keras.Input(shape=(28,28,1), name="digit_image")
    x = layers.Conv2D(32, 3, activation="relu")(inputs)
    x = layers.Conv2D(64, 3, activation="relu")(x)
    x = layers.Flatten()(x)
    x = layers.Dense(128, activation="relu")(x)
    outputs = layers.Dense(10, activation="softmax", name="predictions")(x)
    model = keras.Model(inputs=inputs, outputs=outputs, name="mnist_cnn")
    return model


def main():
    (x_train, y_train), (x_test, y_test) = load_data()
    model = build_model()
    model.compile(
        optimizer="adam",
        loss="sparse_categorical_crossentropy",
        metrics=["accuracy"],
    )

    checkpoint_dir = "checkpoints"
    os.makedirs(checkpoint_dir, exist_ok=True)
    model.fit(
        x_train, y_train,
        epochs=5,
        validation_split=0.1,
        callbacks=[
            keras.callbacks.ModelCheckpoint(
                filepath=os.path.join(checkpoint_dir, "saved_model"),
                save_best_only=True,
                save_weights_only=False,
                monitor="val_accuracy",
            )
        ]
    )
    # Evaluate
    loss, acc = model.evaluate(x_test, y_test)
    print(f"Test accuracy: {acc:.4f}")

if __name__ == "__main__":
    main()
